{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","fixtures","utils","beforeEach","t","dbName","v4","db","connect","context","true","connected","afterEach","always","disconnect","false","conn","dbDrop","run","is","saveImage","image","getImage","created","description","url","likes","liked","deepEqual","tags","userId","id","publicId","encode","truthy","createdAt","likeImage","result","throws","images","getImages","saveImages","map","img","Promise","all","length","saveUser","user","getUser","plainPassword","password","username","email","name","encrypt","authenticate","success","fail","failure","getImagesByUser","random","Math","round","i","push","getImagesByTag","tag"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst uuid = require('uuid-base62')\r\nconst r = require('rethinkdb')\r\nconst Db = require('../')\r\nconst fixtures = require('./fixtures')\r\nconst utils = require('../lib/utils')\r\n\r\ntest.beforeEach('setup databse', async t => {\r\n  const dbName = `platzigram_${uuid.v4()}`\r\n  const db = new Db({ db: dbName })\r\n  await db.connect()\r\n  t.context.db = db\r\n  t.context.dbName = dbName\r\n  t.true(db.connected, 'should be connected')\r\n})\r\n\r\ntest.afterEach.always('cleanup database', async t => {\r\n  let db = t.context.db\r\n  let dbName = t.context.dbName\r\n  await db.disconnect()\r\n  t.false(db.connected, 'should be disconnected')\r\n\r\n  let conn = await r.connect({})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n\r\n// test.after.always('cleanup database', async t => {\r\n//   let conn = await r.connect({})\r\n//   await r.dbDrop(dbName).run(conn)\r\n// })\r\n\r\ntest('save image', async t => {\r\n  let db = t.context.db\r\n\r\n  t.is(typeof db.saveImage, 'function', 'saveImage is function')\r\n\r\n  let image = fixtures.getImage()\r\n  // let image = {\r\n  //   description: 'an #awesome picture with #tags #platzi',\r\n  //   url: `https://platzigram.test/${uuid.v4().jpg}`,\r\n  //   likes: 0,\r\n  //   liked: false,\r\n  //   userId: uuid.uuid()\r\n  // }\r\n\r\n  let created = await db.saveImage(image)\r\n  t.is(created.description, image.description)\r\n  t.is(created.url, image.url)\r\n  t.is(created.likes, image.likes)\r\n  t.is(created.liked, image.liked)\r\n  t.deepEqual(created.tags, ['awesome', 'tags', 'platzi'])\r\n  t.is(created.userId, image.userId)\r\n  t.is(typeof created.id, 'string')\r\n  t.is(created.publicId, uuid.encode(created.id))\r\n  t.truthy(created.createdAt)\r\n})\r\n\r\ntest('like image', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.likeImage, 'function', 'likeImage should be function')\r\n  let image = fixtures.getImage()\r\n  let created = await db.saveImage(image)\r\n  let result = await db.likeImage(created.publicId)\r\n\r\n  t.true(result.liked)\r\n  t.is(result.likes, image.likes + 1)\r\n})\r\n\r\ntest('get image', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.getImage, 'function', 'getImage is a function')\r\n\r\n  let image = fixtures.getImage()\r\n  let created = await db.saveImage(image)\r\n  let result = await db.getImage(created.publicId)\r\n\r\n  t.deepEqual(created, result)\r\n  await t.throws(db.getImage('foo'), /not found/)\r\n})\r\n\r\ntest('list all images', async t => {\r\n  let db = t.context.db\r\n  let images = fixtures.getImages(3)\r\n  let saveImages = images.map(img => db.saveImage(img))\r\n  let created = await Promise.all(saveImages)\r\n  let result = await db.getImages()\r\n\r\n  t.is(created.length, result.length)\r\n})\r\n\r\ntest('save user', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.saveUser, 'function', 'saveUser is a function')\r\n\r\n  let user = fixtures.getUser()\r\n  let plainPassword = user.password\r\n  let created = await db.saveUser(user)\r\n\r\n  t.is(user.username, created.username)\r\n  t.is(user.email, created.email)\r\n  t.is(user.name, created.name)\r\n  t.is(utils.encrypt(plainPassword), created.password)\r\n  t.is(typeof created.id, 'string')\r\n  t.truthy(created.createdAt)\r\n})\r\n\r\ntest('get user', async t => {\r\n  let db = t.context.db\r\n\r\n  t.is(typeof db.getUser, 'function', 'getUser is a function')\r\n\r\n  let user = fixtures.getUser()\r\n  let created = await db.saveUser(user)\r\n  let result = await db.getUser(user.username)\r\n  t.deepEqual(created, result)\r\n\r\n  await t.throws(db.getUser('foo'), /not found/)\r\n})\r\n\r\ntest('authenticate user', async t => {\r\n  let db = t.context.db\r\n\r\n  t.is(typeof db.authenticate, 'function', 'authenticate is a function')\r\n\r\n  let user = fixtures.getUser()\r\n  let plainPassword = user.password\r\n  await db.saveUser(user)\r\n\r\n  let success = await db.authenticate(user.username, plainPassword)\r\n  t.true(success)\r\n\r\n  let fail = await db.authenticate(user.username, 'foo')\r\n  t.false(fail)\r\n\r\n  let failure = await db.authenticate('foo', 'bar')\r\n  t.false(failure)\r\n})\r\n\r\ntest('list images by user', async t => {\r\n  let db = t.context.db\r\n\r\n  t.is(typeof db.getImagesByUser, 'function', 'getImagesByUser is a function')\r\n\r\n  let images = fixtures.getImages(10)\r\n  let userId = uuid.uuid()\r\n  let random = Math.round(Math.random() * images.length)\r\n\r\n  let saveImages = []\r\n  for (let i = 0; i < images.length; i++) {\r\n    if (i < random) {\r\n      images[i].userId = userId\r\n    }\r\n    saveImages.push(db.saveImage(images[i]))\r\n  }\r\n\r\n  await Promise.all(saveImages)\r\n\r\n  let result = await db.getImagesByUser(userId)\r\n  t.is(result.length, random)\r\n})\r\n\r\ntest('list images by tag', async t => {\r\n  let db = t.context.db\r\n\r\n  t.is(typeof db.getImagesByTag, 'function', 'getImagesByTag is a function')\r\n\r\n  let images = fixtures.getImages(10)\r\n  let tag = '#filterit'\r\n  let random = Math.round(Math.random() * images.length)\r\n\r\n  let saveImages = []\r\n  for (let i = 0; i < images.length; i++) {\r\n    if (i < random) {\r\n      images[i].description = tag\r\n    }\r\n    saveImages.push(db.saveImage(images[i]))\r\n  }\r\n\r\n  await Promise.all(saveImages)\r\n\r\n  let result = await db.getImagesByTag(tag)\r\n  t.is(result.length, random)\r\n})\r\n"]}